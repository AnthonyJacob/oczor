case (x => x)
-
FunctionF ["_a1"] [ReturnF (CallF (FunctionF ["x"] [ReturnF (IdentF "x")]) [IdentF "_a1"])]
=
case ((x : Int) => x)
-
FunctionF ["_a1"] [ReturnF (CallF (FunctionF ["x"] [ReturnF (IdentF "x")]) [IdentF "_a1"])]
=
foo = case
 z => 2
 x y => 2
-
ObjectF [("foo",FunctionF ["_a1"] [ReturnF (CallF (FunctionF ["z"] [ReturnF (LitF (LitInt 2))]) [IdentF "_a1"])])]
=
foo = case
 x y => 2
 z => 2
-
ObjectF [("foo",FunctionF ["_a1"] [IfF (CallF (FunctionF ["_a"] [ReturnF (BoolAndsF [HasFieldF (IdentF "_a") "item1",HasFieldF (IdentF "_a") "item2"])]) [IdentF "_a1"]) [ReturnF (CallF (FunctionF ["_a"] [VarF "x" (FieldF (IdentF "_a") "item1"),VarF "y" (FieldF (IdentF "_a") "item2"),ReturnF (LitF (LitInt 2))]) [IdentF "_a1"])] [ReturnF (CallF (FunctionF ["z"] [ReturnF (LitF (LitInt 2))]) [IdentF "_a1"])]])]