type Lazy a = a
foo : Lazy Int
foo = 1
-
ObjectF [("foo",FunctionF [] [ReturnF (LitF (LitInt 1))])]
=
type Lazy a = a
foo : Lazy Int
foo = 1
bar = foo
-
ScopeF [VarF "foo" (FunctionF [] [ReturnF (LitF (LitInt 1))])] (ObjectF [("foo",IdentF "foo"),("bar",IdentF "foo")])
=
type Lazy a = a
foo : Lazy Int
foo = 1
bar : Int
bar = foo
-
ScopeF [VarF "foo" (FunctionF [] [ReturnF (LitF (LitInt 1))])] (ObjectF [("foo",IdentF "foo"),("bar",CallF (IdentF "foo") [])])
=
type Lazy a = a
foo : Int => Lazy Int
foo x = x
-
ObjectF [("foo",FunctionF ["x"] [ReturnF (FunctionF [] [ReturnF (IdentF "x")])])]